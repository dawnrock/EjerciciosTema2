{"version":3,"sources":["index.tsx"],"names":[],"mappings":"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","file":"src.f69400ca.js","sourceRoot":"..\\src","sourcesContent":["/**EJERCICIOS ENTREGABLES TEMA 2 LENGUAJES */\r\n\r\n/*Implementa una función head (inmutable), tal que, dado un array \r\n *como entrada extraiga y devuelva su primer elemento. Uliza destructuring.*/ \r\n\r\nconst transportsA = [\"bus\" ,\"coche\" ,\"moto\" ,\"bici\", \"patinete\"]\r\n\r\nconsole.log('Array transportsA: ' , transportsA);\r\nconsole.log(\"**********************************\");\r\n\r\nconst head = ([primero, ]) => [primero];\r\n\r\nconsole.log('Primer elemento: ', head(transportsA));\r\nconsole.log(\"**********************************\");\r\n\r\n\r\n/**Implementa una función tail (inmutable), tal que, dado un array como \r\n *entradadevuelta todos menos el primer elemento. Uliza rest operator.*/\r\n\r\nconst tail = ([, ...todosMenosElPrimero]) => todosMenosElPrimero;\r\n\r\nconsole.log('Todos los elementos menos el primero: ', tail(transportsA));\r\nconsole.log(\"**********************************\");\r\n\r\n\r\n/**Implementa una función init (inmutable), tal que, dado un array como entrada devuelva \r\n * todos los elementos menos el último. Uliza los métodos que ofreceArray.prototype. */\r\n\r\n const init = arrayTransports => {\r\n    console.log(\"Eliminamos el último elemento: \", [arrayTransports.pop()]);\r\n    return arrayTransports; \r\n};\r\n\r\n\r\n/** Ahora el array contiene solo 4 objetos [\"bus\" ,\"coche\" ,\"moto, \"bici\"]*/\r\n\r\nconsole.log(\"El array transportsA tiene ahora 4 objetos : \", init(transportsA));\r\nconsole.log(\"**********************************\");\r\n\r\n\r\n/**Implementa una función last (inmutable), tal que, dado un array como entrada devuelva \r\n * el último elemento. */\r\n\r\nconst last = arrayTransports =>  [arrayTransports.pop()];\r\n\r\n// const last = ([...firstElements, lastElement]) => lastElement;  ?????????????????????????????????????????????????????????????????????????????????????????????????\r\n\r\n\r\nconsole.log(\"Ahora le quitamos el último elemento al array transportsA usando de nuevo .pop(), en este caso sería el elemento:  \", last(transportsA))\r\nconsole.log(\"Por lo que nos dejará el array transportA con solo tres elementos: \", transportsA);\r\nconsole.log(\"**********************************\");\r\n\r\nconst transportsB = [\"barco\", \"lancha\", \"moto de agua\", \"yate\"];\r\n\r\nconsole.log(\"Nos dan un nuevo array llamado transportsB: \" , transportsB);\r\nconsole.log(\"**********************************\");\r\n\r\n\r\n/** Implementa una función concat (inmutable) tal que, dados 2 arrays como entrada,devuelva \r\n *  la concatenación de ambos. Uliza rest / spread operators \r\n */\r\n\r\nconst concat = ( arrayA, arrayB) => [...arrayA, ...arrayB];\r\n\r\nconsole.log(\"Concatenación de array 'transportsA': \" , [...transportsA] , \" y array 'transportsB': \" , [...transportsB], \"Resultado: \" , concat(transportsA, transportsB) );\r\nconsole.log(\"**********************************\");\r\n\r\n\r\n/** Implementa una versión del ejercicio anterior donde se acepten múltiples arrays deentrada (más de 2).\r\n * \r\n */\r\n\r\nconst transportsC = [\"avión\", \"globo aerostático\", \"helicóptero\" ];\r\nconst transportsD = [\"tren\", \"tranvía\", \"AVE\"]\r\n\r\nconsole.log(\"Creamos dos arrays nuevos, transportsC: \" , [...transportsC]  );\r\nconsole.log(\"Y transportsD: \" , [...transportsD]);\r\n\r\nconst concatAny = (...any) => [...any];\r\n\r\nconsole.log(\"La función concatAny acepta un número indefinido de argumentos, en este caso le pasaremos los cuatro arrays creados: \",transportsA,transportsB,transportsC,transportsD );\r\nconsole.log( \"Resultado: \" , (concatAny(transportsA + \",\" + transportsB + \",\" + transportsC + \",\" + transportsD )));\r\nconsole.log(\"**********************************\");\r\n\r\n\r\n/**Implementa una función clone que, a partir del objeto de entrada source devuelva un nuevo objeto con las mismas propiedades: */\r\n\r\nconst obj1 = {\r\n    puertas: 4,\r\n    ventanas: 4,\r\n    motor: 1,\r\n    ruedas: 4,\r\n}\r\n\r\nconsole.log(\"Creamos el objeto obj1: \" , obj1);\r\n\r\nconst clone = source => ({...source});\r\n    \r\nconsole.log(\"Y de nuevo creamos un objeto, pero este a partir de obj \", clone(obj1));\r\nconsole.log(\"**********************************\");   \r\n\r\n\r\n/**Implementa una función merge que, dados dos objetos de entrada source y target,devuelva un nuevo objeto con todas las propiedades de target y \r\n * de source, y en caso de propiedades con el mismo nombre, source sobreescribe a target. */\r\n\r\nconst obj2 = {\r\n    puertas: 2,\r\n    ventanas: 2,\r\n    motor: 2,\r\n    tubosDeEscape: 2,\r\n    extras: \"si\",\r\n    ruedas: 2,\r\n}\r\n\r\nconsole.log(\"Ahora creamos el objeto obj2, que tiene dos elementos nuevos (tubosDeEscape y extras): \", obj2)\r\n\r\nconst merge = (source, target) => ({...target, ...source});\r\n\r\nconsole.log(\"El resultado de hacer merge de dos objetos respetando los elementos del primero, y añadiendo los elementos del segundo es: \", merge(obj1, obj2));\r\nconsole.log(\"**********************************\");   \r\n\r\n\r\n/**Crea una función isBookRead que reciba una lista de libros y un titulo y devuelva si se ha leído o no dicho libro. Un libro es un objeto con title como\r\n *  string y isRead como booleano. En caso de no existir el libro devolver false */\r\n\r\n\r\n/**Opcional\r\n * Uliza Typescript para añadir los tipos adecuados. */ \r\n\r\nconst library: object[] = [];\r\n\r\nconst isRead: boolean = true;\r\n\r\nlibrary.push(\r\n    {title: \"El señor de los anillos\", isRead: true},\r\n    {title: \"Los pilares de la tierra\", isRead: true},\r\n    {title: \"El código Da Vinci\", isRead: true},\r\n    {title: \"El Hobbit\", isRead: false},\r\n    {title: \"Fariñas\", isRead: true}\r\n);    \r\n\r\n\r\nconsole.log(\"Array library: \", ...library); \r\n\r\nconsole.log(\"Ahora filtramos todos los libros del array por su propiedad isRead: \");\r\n\r\nconst isBookread = (books, anyTitle ) => books.some(book => book.title === anyTitle && book.isRead === true? true: false);\r\n\r\n\r\nconsole.log(isBookread(library, \"El señor de los anillos\"), \"El señor de los anillos está en la lista y leído.\");       // true, está en la lista y leído.  \r\nconsole.log(isBookread(library, \"El asesinato de PLatón\"), \"El asesinato de PLatón no está en la lista.\");              // false, no está en la lista.  \r\nconsole.log(isBookread(library, \"Los pilares de la tierra\"), \"Los pilares de la tierra está en la lista y leído.\");     // true, está en la lista y leído.\r\nconsole.log(isBookread(library, \"El código Da Vinci\"), \"El código Da Vinci está en la lista y leído.\");                 // true, está en la lista y leído.\r\nconsole.log(isBookread(library, \"El Hobbit\"), \"El Hobbit está en la lista, pero no se ha leído.\");                      // false, está en la lista, pero no se ha leído. \r\nconsole.log(isBookread(library, \"Fariñas\"), \"Fariñas está en la lista y leído.\");                                       // true, está en la lista y leído. \r\nconsole.log(isBookread(library,\"La rebelión de las masas\"), \"La rebelión de las masas no está en la lista.\");           // false, no está en la lista.\r\n\r\n\r\nconsole.log(\"**********************************\");   \r\n\r\n\r\n/**El objevo de este ejercicio es crear una máquina tragaperras ulizando clases donde cada vez que juguemos insertemos una moneda. \r\n * Cada máquina tragaperras (instancia) tendrá un contador de monedas que automáticamente se irá incrementando conforme vayamos jugando.\r\n * Cuando se llame al método play el número de monedas se debe incrementar de forma automática y debe generar tres booleanos aleatorios que \r\n * representarán el estado de las 3 ruletas. \r\n * El usuario habrá ganado en caso de que los tres booleanos sean true, y por tanto deberá mostrarse por consola el mensaje:\r\n * \"Congratulations!!!. You won <número de monedas> coins!!\"y reiniciar las monedas almacenadas, ya que las hemos conseguido y han\r\n * salido de la máquina.\r\n * En caso contrario deberá mostrar otro mensaje:\"Good luck next time!!\". \r\n*/\r\n\r\n\r\n\r\nclass slotMachine {\r\n    \r\n    constructor() {\r\n        this.total = 0;\r\n        this.restart = 0;\r\n        this.resultado = {};\r\n        this.ruletaA = Math.random() < 0.5 ? true : false;\r\n        this.ruletaB =  Math.random() < 0.5 ? true : false;\r\n        this.ruletaC =  Math.random() < 0.5 ? true : false;\r\n\r\n    }\r\n    \r\n    \r\n    play() {\r\n        this.total += 1;\r\n        \r\n        this.ruletaA === true && this.ruletaB === true && this.ruletaC === true? this.resultado = true: this.resultado = false;\r\n        \r\n        this.resultado === true?  console.log(\"Enhorabuena, has ganado \" , this.total, this.total >= 2? \" monedas!!!\": \" moneda!\" ) :  console.log(\"Has perdido, sigue intentándolo. \");\r\n    \r\n        return ;\r\n    }\r\n\r\n     \r\n    \r\n}\r\n\r\nconst maquina1 = new slotMachine();\r\n\r\n\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\nmaquina1.play();\r\n\r\n\r\n\r\nconsole.log(maquina1.ruletaA);\r\nconsole.log(maquina1.ruletaB);\r\nconsole.log(maquina1.ruletaC);"]}